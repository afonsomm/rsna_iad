# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/2_dicom_to_nifti_remote.ipynb.

# %% auto 0
__all__ = ['dicom_volume_to_nifti_remote', 'VastAI', 'dicom_serie_to_nifti_remote', 'dicom_series_to_niftis_remote']

# %% ../nbs/2_dicom_to_nifti_remote.ipynb 5
from dicom_to_nifti import *
import os

# %% ../nbs/2_dicom_to_nifti_remote.ipynb 8
import torch
import numpy as np
import nibabel

def dicom_volume_to_nifti_remote(volume, ds_metadata_l, serie_uid, path, send_file, remote_path):

    nifti_path = f"{path}/{serie_uid}.nii.gz"
    
    nifti = nibabel.nifti1.Nifti1Image(volume.detach().cpu().numpy(), affine=np.eye(4))
    
    # Define spacing
    spacing = dicom_serie_get_spacing(ds_metadata_l)
    nifti.header.set_zooms(spacing)
    
    nibabel.save(nifti, nifti_path)

    # copy to remote machine
    output = send_file(nifti_path, remote_path)
    if output.stderr != b"":
        print(output.stderr.decode("UTF-8"))

    os.remove(nifti_path)

# %% ../nbs/2_dicom_to_nifti_remote.ipynb 10
import subprocess

class VastAI:

    def __init__(self, public_ip, ssh_port):
        self.public_ip = public_ip
        self.ssh_port = ssh_port

    def set_api_key(self, api_key):
        output = subprocess.run(["vastai", "set", "api-key", api_key], capture_output=True)
        return output

    def send_file(self, local_path, remote_path):
        output = subprocess.run(["rsync", "-arz", "-v", "-y",
                f"-e ssh -i {os.environ["HOME"]}/.ssh/id_rsa -p {self.ssh_port}", 
                local_path, 
                f'root@{self.public_ip}:/workspace/{remote_path}'], capture_output=True)

        if output.stderr == b"Welcome to vast.ai. If authentication fails, try again after a few seconds, and double check your ssh key.\nHave fun!\n":
            output.stderr = b""
        
        return output

# %% ../nbs/2_dicom_to_nifti_remote.ipynb 14
def dicom_serie_to_nifti_remote(base_path_dicom, serie_uid, base_path_nifti, send_file, remote_path):
    ds_l = dicom_serie_load(base_path_dicom, serie_uid)
    volume, ds_metadata_l = dicom_serie_process(ds_l)
    dicom_volume_to_nifti_remote(volume, ds_metadata_l, serie_uid, base_path_nifti, send_file, remote_path)

# %% ../nbs/2_dicom_to_nifti_remote.ipynb 17
from concurrent.futures import ProcessPoolExecutor, as_completed
import multiprocessing
from tqdm import tqdm

def dicom_series_to_niftis_remote(base_path_dicoms, series_uid, base_path_niftis, send_file, remote_path, max_workers):

    # Set temporary directory
    series_path_nifti_temp = f"{base_path_nifti}/temp"
    if not os.path.exists(series_path_nifti_temp):
        os.mkdir(series_path_nifti_temp)
    
    with ProcessPoolExecutor(max_workers=max_workers) as executor:
        futures = [executor.submit(dicom_serie_to_nifti_remote, base_path_dicoms, serie_uid, series_path_nifti_temp, send_file, remote_path) for serie_uid in series_uid]
        for future in tqdm(as_completed(futures), total=len(futures)):
            ...

    os.rmdir(series_path_nifti_temp)
